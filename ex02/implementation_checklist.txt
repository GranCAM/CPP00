CPP00 Ex02 - Account Class Implementation Checklist
================================================

This checklist helps you implement the Account class step by step, learning key C++ concepts.

CORE LEARNING OBJECTIVES:
- Static vs Instance Members (class-wide vs object-specific data)
- Object Lifecycle (construction, destruction, initialization)
- Encapsulation (controlled access to private data)
- Const-correctness (methods that don't modify state)
- Input validation (defensive programming patterns)

STEP-BY-STEP IMPLEMENTATION:
============================

□ Step 1: Static Member Initialization
   CONCEPT: Static members belong to the CLASS, not instances
   EXPECTED: 4 lines in Account.cpp like:
   int Account::_nbAccounts = 0;
   int Account::_totalAmount = 0;
   int Account::_totalNbDeposits = 0;
   int Account::_totalNbWithdrawals = 0;
   
   WHY: These track bank-wide statistics shared by ALL accounts

□ Step 2: Constructor Implementation  
   CONCEPT: Member initializer lists and object creation
   EXPECTED: Constructor with syntax:
   Account(int deposit) : _accountIndex(_nbAccounts), _amount(deposit), _nbDeposits(0), _nbWithdrawals(0)
   
   KEY ACTIONS:
   - Initialize instance variables in initializer list
   - Increment _nbAccounts after setting _accountIndex  
   - Update _totalAmount with deposit
   - Print creation message with timestamp
   
   OUTPUT FORMAT: [timestamp] index:0;amount:42;created

□ Step 3: Timestamp Function
   CONCEPT: Time formatting in C++98, private helper functions
   EXPECTED: Function printing [YYYYMMDD_HHMMSS] format
   
   C++98 METHOD (no std::put_time):
   - Use std::time(0) and std::localtime()
   - Manual formatting with std::setfill('0') and std::setw(2)
   - Remember: tm_year+1900, tm_mon+1 (months are 0-11)
   
   OUTPUT: [20251024_143052] (note space after bracket)

□ Step 4: Static Getter Functions
   CONCEPT: Encapsulation - controlled access to private data
   EXPECTED: 4 simple functions:
   int getNbAccounts() { return _nbAccounts; }
   int getTotalAmount() { return _totalAmount; }
   int getNbDeposits() { return _totalNbDeposits; }
   int getNbWithdrawals() { return _totalNbWithdrawals; }
   
   WHY STATIC: Can be called without creating Account object

□ Step 5: Display Accounts Info Function  
   CONCEPT: Static functions and formatted output
   EXPECTED: Function using timestamp + getter functions
   
   OUTPUT FORMAT: [timestamp] accounts:8;total:20049;deposits:0;withdrawals:0
   
   TIP: Use your getter functions for clean code!

□ Step 6: Const Instance Methods
   CONCEPT: Const-correctness - functions that don't modify data
   EXPECTED: Two functions:
   - int checkAmount() const { return _amount; }
   - void displayStatus() const { /* print account info */ }
   
   displayStatus() OUTPUT: [timestamp] index:0;amount:47;deposits:1;withdrawals:0
   
   WHY CONST: These functions only READ data, never WRITE

□ Step 7: Deposit Function
   CONCEPT: State management and atomic updates  
   EXPECTED: Function updating 4 variables:
   - _amount += deposit (instance)
   - _nbDeposits++ (instance) 
   - _totalAmount += deposit (static)
   - _totalNbDeposits++ (static)
   
   OUTPUT FORMAT: [timestamp] index:0;p_amount:42;deposit:5;amount:47;nb_deposits:1
   
   KEY: Store p_amount BEFORE modifying _amount

□ Step 8: Withdrawal Function
   CONCEPT: Conditional logic with return values
   EXPECTED: Function with TWO scenarios:
   
   SUCCESS: Update 4 variables, return true
   - Similar to deposit but subtracting
   - OUTPUT: [timestamp] index:1;p_amount:819;withdrawal:34;amount:785;nb_withdrawals:1
   
   FAILURE: No updates, return false  
   - OUTPUT: [timestamp] index:0;p_amount:47;withdrawal:refused
   
   KEY: Check balance FIRST, then decide what to do

□ Step 9: Test and Debug
   CONCEPT: Systematic debugging through output comparison
   EXPECTED: Program output matching 19920104_091532.log (except timestamps)
   
   TESTING STEPS:
   1. Compile: c++ -Wall -Wextra -Werror -std=c++98 Account.cpp tests.cpp -o account
   2. Run: ./account > my_output.log  
   3. Compare: diff my_output.log 19920104_091532.log
   
   COMMON ISSUES:
   - Missing semicolons in output format
   - Wrong variable updates (check static vs instance)
   - Timestamp format errors
   - Account index not starting from 0

□ Step 10: Create Makefile
   CONCEPT: Build automation with 42 standards
   EXPECTED: Makefile with variables:
   - NAME = account
   - SRCS = Account.cpp tests.cpp  
   - CXX = c++
   - CXXFLAGS = -Wall -Wextra -Werror -std=c++98
   
   REQUIRED RULES: all, clean, fclean, re
   
   USAGE: make (builds), make clean, make fclean, make re

DEBUGGING CHECKLIST:
===================
□ All timestamps have format [YYYYMMDD_HHMMSS] 
□ Account indices start from 0 and increment properly
□ Static counters update correctly on deposits/withdrawals  
□ Refused withdrawals don't update any counters
□ Constructor/destructor messages appear with timestamps
□ Semicolons match the log file exactly
□ No C++11 features used (stick to C++98)

CONCEPTS MASTERED:
==================
□ Static vs Instance members - understand the difference
□ Member initializer lists - proper constructor syntax
□ Const-correctness - when and why to use const methods
□ Encapsulation - private data with public interfaces
□ Object lifecycle - construction and destruction
□ Time formatting in C++98
□ Conditional operations with return values
□ Systematic debugging techniques

FINAL TEST:
===========
Your program should produce output identical to 19920104_091532.log 
except for timestamps (which will be current date/time).

SUCCESS CRITERIA:
- Compilation with no warnings/errors
- Output matches expected format exactly  
- All account operations work correctly
- Proper memory management (no leaks)
- Clean, readable code following 42 standards
